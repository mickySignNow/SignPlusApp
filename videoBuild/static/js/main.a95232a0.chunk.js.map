{"version":3,"sources":["Lobby.js","Participant.js","Room.js","utilities/util.js","VideoChat.js","App.js","serviceWorker.js","index.js"],"names":["Lobby","username","handleUsernameChange","roomName","handleRoomNameChange","handleSubmit","roomIdQuery","onSubmit","htmlFor","type","id","value","onChange","required","Participant","participant","useState","videoTracks","setVideoTracks","audioTracks","setAudioTracks","videoRef","useRef","audioRef","trackpubsToTracks","trackMap","Array","from","values","map","publication","track","filter","useEffect","on","kind","v","a","removeAllListeners","videoTrack","attach","current","detach","audioTrack","console","log","identity","className","ref","autoPlay","muted","closeMic","Room","token","handleLogout","exitRedirect","room","setRoom","participants","setParticipants","micState","setMicState","camState","setCamState","popupMessage","setPopupMessage","exitMeeting","window","location","replace","stayInMeeting","participantConnected","prevParticipants","p","participantDisconnected","Video","connect","name","then","forEach","currentRoom","localParticipant","state","tracks","trackPublication","stop","disconnect","remoteParticipants","key","sid","onClick","disable","enable","getQuery","str","URL","href","searchParams","get","VideoChat","setUsername","setRoomName","setToken","useCallback","event","target","roomID","exitUrl","getRoomName","preventDefault","fetch","method","body","JSON","stringify","headers","res","json","data","autoLogin","App","render","Boolean","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a95232a0.chunk.js","sourcesContent":["import React from 'react';\n\nconst Lobby = ({\n  username,\n  handleUsernameChange,\n  roomName,\n  handleRoomNameChange,\n  handleSubmit,\n  roomIdQuery\n}) => {\n  let render;\n  if(roomIdQuery != null && roomIdQuery != ''){\n    render = (\n      <form onSubmit={handleSubmit}>\n        <h2>פרטי כניסה לשיחה</h2>\n        <p>קוד שיחה: {roomIdQuery}</p><br/><br/>\n        <p>בבקשה הכניסו את שמכם</p><br/><br/>\n        <div>\n          <label htmlFor=\"name\">השם שלך:</label>\n          <input\n            type=\"text\"\n            id=\"field\"\n            value={username}\n            onChange={handleUsernameChange}\n            required\n          />\n        </div>\n  \n        <button type=\"submit\">לחצו כאן כדי להכנס לשיחה</button>\n      </form>\n    );\n  } else{\n    render = (\n      <form onSubmit={handleSubmit}>\n        <h2>פרטי כניסה לשיחה</h2>\n        \n        <p>אם הגעתם לדף זה בטעות חיזרו לאפליקציה והכנסו לשיחה מתפריט השיחות שלכם</p><br/><br/>\n        <p>במידה ואתם יודעים את קוד השיחה שלכם הקלידו אותו ואת שמכם ולחצו על הלחצן כדי להכנס לשיחה</p><br/><br/>\n        <div>\n          <label htmlFor=\"name\">השם שלך:</label>\n          <input\n            type=\"text\"\n            id=\"field\"\n            value={username}\n            onChange={handleUsernameChange}\n            required\n          />\n        </div>\n  \n        <div>\n          <label htmlFor=\"room\">קוד השיחה:</label>\n          <p>הקוד שקיבלת בעת אישור הפגישה עם המתורגמן</p>\n          <input\n            type=\"text\"\n            id=\"room\"\n            value={roomName}\n            onChange={handleRoomNameChange}\n            required\n          />\n        </div>\n  \n        <button type=\"submit\">לחצו כאן כדי להכנס לשיחה</button>\n      </form>\n    );\n  }\n  return render;\n};\n\nexport default Lobby;\n","import React, { useState, useEffect, useRef } from \"react\";\n\nconst Participant = ({ participant }) => {\n  const [videoTracks, setVideoTracks] = useState([]);\n  const [audioTracks, setAudioTracks] = useState([]);\n\n  const videoRef = useRef();\n  const audioRef = useRef();\n\n  const trackpubsToTracks = (trackMap) =>\n    Array.from(trackMap.values())\n      .map((publication) => publication.track)\n      .filter((track) => track !== null);\n\n  useEffect(() => {\n    setVideoTracks(trackpubsToTracks(participant.videoTracks));\n    setAudioTracks(trackpubsToTracks(participant.audioTracks));\n\n    const trackSubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => [...videoTracks, track]);\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => [...audioTracks, track]);\n      }\n    };\n\n    const trackUnsubscribed = (track) => {\n      if (track.kind === \"video\") {\n        setVideoTracks((videoTracks) => videoTracks.filter((v) => v !== track));\n      } else if (track.kind === \"audio\") {\n        setAudioTracks((audioTracks) => audioTracks.filter((a) => a !== track));\n      }\n    };\n\n    participant.on(\"trackSubscribed\", trackSubscribed);\n    participant.on(\"trackUnsubscribed\", trackUnsubscribed);\n\n    return () => {\n      setVideoTracks([]);\n      setAudioTracks([]);\n      participant.removeAllListeners();\n    };\n  }, [participant]);\n\n  useEffect(() => {\n    const videoTrack = videoTracks[0];\n    if (videoTrack) {\n      videoTrack.attach(videoRef.current);\n      return () => {\n        videoTrack.detach();\n      };\n    }\n  }, [videoTracks]);\n\n  useEffect(() => {\n    const audioTrack = audioTracks[0];\n    if (audioTrack) {\n      audioTrack.attach(audioRef.current);\n      return () => {\n        audioTrack.detach();\n      };\n    }\n  }, [audioTracks]);\n  console.log(\"participant: \" + participant.identity);\n  console.log(participant);\n\n  return (\n    <div className=\"participant\">\n      <h3>{participant.identity}</h3>\n      <video ref={videoRef} autoPlay={true} />\n      <audio ref={audioRef} autoPlay={true} muted={false} />\n    </div>\n  );\n};\n\nexport default Participant;\n","import React, { useState, useEffect } from 'react';\nimport Video from 'twilio-video';\nimport Participant from './Participant';\n\nconst openMic =\"פתח מיקרופון\";\nconst closeMic =\"סגור מיקרופון\";\nconst opeCam =\"פתח מצלמה\";\nconst closeCam =\"סגור מצלמה\";\nconst meetingID = \"קוד שיחה:\";\nconst closeMeeting = \"סגור שיחה\";\nconst popupMessageText =\"האם אתה בטוח שאתה רוצה לצאת מהשיחה?\";\nconst popupMessageTextExit =\"כן צא מהשיחה\";\nconst popupMessageTextStay =\"לא, חזור לשיחה\";\n\nconst Room = ({ roomName, token, handleLogout, exitRedirect }) => {\n  const [room, setRoom] = useState(null);\n  const [participants, setParticipants] = useState([]);\n  const [micState, setMicState] = useState(closeMic);\n  const [camState, setCamState] = useState(closeCam);\n  const [popupMessage, setPopupMessage]= useState([]);\n\n  const toggleMic = () => {\n    let tracks =room.localParticipant.audioTracks.forEach(function( publication) {\n      if(micState == closeMic){\n        console.log(\"closing mic\");\n        publication.track.disable();\n      }\n      else{\n        console.log(\"opening mic\");\n        publication.track.enable();\n      }\n    });\n    if(micState == closeMic){\n      setMicState(openMic);\n    }\n    else{\n      setMicState(closeMic);\n    }\n  }\n\n  const toggleCam = () => {\n    room.localParticipant.videoTracks.forEach(function(publication) {\n      if(camState == closeCam){\n        console.log(\"close cam\");\n        publication.track.disable();\n      }\n      else{\n        console.log(\"open cam\");\n        publication.track.enable();\n      }\n    });\n    if(camState == closeCam){\n      setCamState(opeCam);\n    }\n    else{\n      setCamState(closeCam);\n    }\n  }\n\n  const exitMeeting = () => {\n    if(exitRedirect == '' || exitRedirect == null){\n      window.location.replace(\"https://signplus-295808.web.app/\");\n    }\n    else{\n      window.location.replace(exitRedirect);\n    }\n  }\n\n  //hiding exit message popup\n  const stayInMeeting = () => setPopupMessage([]);\n\n  const onClose = () => {\n    setPopupMessage([\n      <div className=\"popupMessage\">\n      <p>{popupMessageText}</p>\n      <button className=\"closeMeetingButton\" onClick={exitMeeting} >{popupMessageTextExit}</button>\n      <button onClick={stayInMeeting} >{popupMessageTextStay}</button>\n      </div>\n    ])\n  }\n\n  \n\n  useEffect(() => {\n    const participantConnected = participant => {\n      //checking if the participant already exist in participants list\n      //and if so removes it current appirence with filter and add the user to the end of the array\n        setParticipants(prevParticipants => [...prevParticipants.filter(p => p.identity != participant.identity), participant]);\n    };\n\n    const participantDisconnected = participant => {\n      setParticipants(prevParticipants =>\n        prevParticipants.filter(p => p !== participant)\n      );\n    };\n\n    Video.connect(token, {\n      name: roomName\n    }).then(room => {\n      setRoom(room);\n      room.on('participantConnected', participantConnected);\n      room.on('participantDisconnected', participantDisconnected);\n      room.participants.forEach(participantConnected);\n    });\n\n    return () => {\n      setRoom(currentRoom => {\n        if (currentRoom && currentRoom.localParticipant.state === 'connected') {\n          currentRoom.localParticipant.tracks.forEach(function(trackPublication) {\n            trackPublication.track.stop();\n          });\n          currentRoom.disconnect();\n          return null;\n        } else {\n          return currentRoom;\n        }\n      });\n    };\n  }, [roomName, token]);\n\n  const remoteParticipants = participants.filter(p => p.identity != \"invisibleAdmin\").map(participant => (\n    <Participant key={participant.sid} participant={participant} />\n  ));\n\n  console.log(\"remotePart:\");\n  console.log(participants);\n  console.log(remoteParticipants);\n  return (\n    <div className=\"room\">\n      <p>{meetingID} {roomName}</p>\n      <div>\n      \n      <div className=\"remote-participants\">{remoteParticipants}</div>\n      <div className=\"local-participant\">\n        {room ? (\n          <Participant\n            key={room.localParticipant.sid}\n            participant={room.localParticipant}\n          />\n        ) : (\n          ''\n        )}\n      </div>\n      <div className=\"roomButtons\">\n      {/* <button onClick={handleLogout}>Log out</button> */}\n      <button onClick={toggleMic}>{micState}</button>\n      <button onClick={toggleCam}>{camState}</button>\n      <button className=\"closeMeetingButton\" onClick={onClose}>{closeMeeting}</button>\n      </div>\n      </div>\n      {popupMessage}\n    </div>\n    \n  );\n};\n\nexport default Room;\n","export const getQuery=(str)=>{\n    const current_url = new URL( window.location.href);\n    const search_params = current_url.searchParams;\n    return search_params.get(str);\n  }","import React, { useState, useCallback } from 'react';\nimport Lobby from './Lobby';\nimport Room from './Room';\nimport {getQuery} from './utilities/util'\n\n// const getQuery=(str)=>{\n//   const current_url = new URL( window.location.href);\n//   const search_params = current_url.searchParams;\n//   return search_params.get(str);\n// }\n\nconst VideoChat = () => {\n  const [username, setUsername] = useState('');\n  const [roomName, setRoomName] = useState('');\n  const [token, setToken] = useState(null);\n\n  const handleUsernameChange = useCallback(event => {\n    setUsername(event.target.value);\n  }, []);\n\n  const handleRoomNameChange = useCallback(event => {\n    setRoomName(event.target.value);\n  }, []);\n\n  //Get Query data\n  const roomID = getQuery('roomName');\n  \n  const name = getQuery('name');\n    // setUsername(name);\n  \n  const exitUrl = getQuery('exitUrl');\n\n  const getRoomName = () => {\n    if(roomName != '') return roomName;\n    else if(roomID != '' && roomID != null) return roomID;\n    else return '';\n  }\n\n  const handleSubmit = useCallback(\n    async event => {\n      event.preventDefault();\n      const data = await fetch('/video/token', {\n        method: 'POST',\n        body: JSON.stringify({\n          identity: username,\n          room: getRoomName()\n        }),\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.json());\n      setToken(data.token);\n    },\n    [roomName, username]\n  );\n\n  \n  const handleLogout = useCallback(event => {\n    setToken(null);\n  }, []);\n\n\n   \n  const autoLogin = async () => {\n    const data = await fetch('/video/token', {\n      method: 'POST',\n      body: JSON.stringify({\n        identity: name,\n        room: roomID\n      }),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => res.json());\n    setToken(data.token);\n    // console.log(\"tokenData \"+data.token);\n  };\n  console.log(roomID + \" \"+ name);\n  if(roomID != null && name != null && roomID != '' ) autoLogin();\n\n \n  let render;\n  if (token) {\n    render = (\n      <Room roomName={getRoomName()} token={token} handleLogout={handleLogout} exitRedirect={exitUrl}/>\n    );\n  }else {\n    render = (\n      <Lobby\n        username={username}\n        roomName={roomName}\n        handleUsernameChange={handleUsernameChange}\n        handleRoomNameChange={handleRoomNameChange}\n        handleSubmit={handleSubmit}\n        roomIdQuery={roomID}\n      />\n    );\n  }\n  \n  return render;\n};\n\nexport default VideoChat;\n","import React from 'react';\nimport './App.css';\nimport VideoChat from './VideoChat';\nimport {getQuery} from './utilities/util'\n\nconst App = () => {\n  const meetingId = getQuery('roomName');\n\n  \n\n  let render;\n   render = <VideoChat />;\n  return (\n    <div className=\"app\">\n      <main>\n        {render}\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}